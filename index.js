const P = ["Kachhalā", "Thinlā", "Ponhelā", "Sillā", "Chillā", "Chaulā", "Bachhalā", "Tachhalā", "Dillā", "Gunlā", "Yanlā", "Kaulā"]; const c = ["कछला", "थिंला", "प्वँहेला", "सिल्ला", "चिल्ला", "चौला", "बछला", "तछला", "दिल्ला", "गुँला", "ञला", "कौला"]; const O = ["क.", "थिं.", "प्वँ.", "सि.", "चि.", "चौ.", "ब.", "त.", "दि.", "गुँ.", "ञ.", "कौ."]; const u = [30, 30, 30, 30, 30, 29, 31, 31, 31, 31, 31, 31]; const i = [30, 30, 30, 30, 30, 30, 31, 31, 31, 31, 31, 31]; const s = ["आइतबाः", "सोमबाः", "मङ्लबाः", "बुधबाः", "बिहिबाः", "सुक्रबाः", "सनिबाः"]; const f = 880; function _(e, t, n) { try { if (h(e + f)) { max_date = i[t - 1] } else { max_date = u[t - 1] } } catch (l) { return false } if (n <= max_date) { return true } return false } function R(e, t) { if (h(e + f)) { return i[t - 1] } else { return u[t - 1] } } function W(e, t) { let n = h(t + f); if (n) { return i[e - 1] } else { return u[e - 1] } } function d(t) { t = t.toString(); let n = ""; for (let e = 0; e < t.length; e++) { n += l[parseInt(t.charAt(e))] } return n } function G(t) { t = t.toString(); let n = ""; for (let e = 0; e < t.length; e++) { if (["1", "2", "3", "4", "5", "6", "7", "8", "9", "0"].includes(t[e])) { n += l[parseInt(t.charAt(e))] } else { n += t.charAt(e) } } return n } function h(e) { return e % 4 == 0 && e % 100 != 0 || e % 400 == 0 } const a = 1; const V = 1; const Y = 1; const m = 880; const p = 10; const S = 20; const j = 293; const y = [31, 29, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; const b = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31]; const q = ["January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"]; const z = ["जनवरी", "फेब्रुअरी", "मार्च", "अप्रिल", "मे", "जुन", "जुलाई", "अगस्ट", "सेप्टेम्बर", "ओक्टोबर", "नोभेम्बर", "डिसेम्बर"]; const E = ["Jan", "Feb", "Mar", "Apr", "May", "Jun", "Jul", "Aug", "Sep", "Oct", "Nov", "Dec"]; const l = ["०", "१", "२", "३", "४", "५", "६", "७", "८", "९"]; const H = ["आइतबार", "सोमबार", "मंगलबार", "बुधबार", "बिहिबार", "शुक्रबार", "शनिबार"]; const L = ["आइत", "सोम", "मंगल", "बुध", "बिहि", "शुक्र", "शनि"]; const Q = ["आ.", "सो.", "मं.", "बु.", "बि.", "शु.", "श."]; const U = ["Sunday", "Monday", "Tuesday", "Wednesday", "Thursday", "Friday", "Saturday"]; const X = ["Sun", "Mon", "Tue", "Wed", "Thu", "Fri", "Sat"]; function Z(e, t) { if (h(e)) { return y[t - 1] } else { return b[t - 1] } } function r(t, n, e) { is_valid_date = _(t, n, e); if (!is_valid_date) { alert("सौ. ने. सं. " + d(t) + " " + c[n - 1] + " मा " + d(e) + " दिन छैन"); return } let l = 0; for (let e = a; e < t; e++) { if (h(e + f)) l += 366; else l += 365 } for (let e = 0; e < n - 1; e++) { if (h(t + f)) l += i[e]; else l += u[e] } l += e - 1; let o = m; let r = p; let s = S; while (l > 0) { if (h(o)) { if (s < y[r - 1]) { s += 1; l -= 1 } else { r += 1; s = 0; if (r > 12) { o += 1; r = 1 } } } else { if (s < b[r - 1]) { s += 1; l -= 1 } else { r += 1; s = 0; if (r > 12) { o += 1; r = 1 } } } } return o + " " + r + " " + s } function $(t, n, e) { if (t < m || t == m && n < p || t == m && n == p && e < S) { alert("Supported date range " + m + "-" + p + "-" + S + " to 2044-4-15"); return } if (t > 2044 || t == 2044 && n > 4 || t == 2044 && n == 4 && e > 15) { alert("Supported date range " + m + "-" + p + "-" + S + " to 2044-4-15"); return } let l = 0; for (let e = m; e < t; e++) { if (h(e)) l += 366; else l += 365 } for (let e = 0; e < n - 1; e++) { if (h(t)) l += y[e]; else l += b[e] } l += e - 1; l -= j; let o = a; let r = V; let s = Y; while (l > 0) { if (h(o + f)) { if (s < i[r - 1]) { s += 1; l -= 1 } else { r += 1; s = 0; if (r > 12) { o += 1; r = 1 } } } else { if (s < u[r - 1]) { s += 1; l -= 1 } else { r += 1; s = 0; if (r > 12) { o += 1; r = 1 } } } } return o + " " + r + " " + s } const g = { 1975: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 1976: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 1977: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365], 1978: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 1979: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 1980: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 1981: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365], 1982: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 1983: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 1984: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 1985: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365], 1986: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 1987: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 1988: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 1989: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365], 1990: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 1991: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 1992: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366], 1993: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365], 1994: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 1995: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365], 1996: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366], 1997: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 1998: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 1999: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2e3: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365], 2001: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2002: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2003: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2004: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365], 2005: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2006: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2007: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2008: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365], 2009: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2010: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2011: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2012: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365], 2013: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2014: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2015: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2016: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365], 2017: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2018: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2019: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366], 2020: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2021: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2022: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365], 2023: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366], 2024: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2025: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2026: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2027: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365], 2028: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2029: [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365], 2030: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2031: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365], 2032: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2033: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2034: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2035: [30, 32, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365], 2036: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2037: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2038: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2039: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365], 2040: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2041: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2042: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2043: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365], 2044: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2045: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2046: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2047: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2048: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2049: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365], 2050: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366], 2051: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2052: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2053: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365], 2054: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366], 2055: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2056: [31, 31, 32, 31, 32, 30, 30, 29, 30, 29, 30, 30, 365], 2057: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2058: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 365], 2059: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2060: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2061: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2062: [30, 32, 31, 32, 31, 31, 29, 30, 29, 30, 29, 31, 365], 2063: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2064: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2065: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2066: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 29, 31, 365], 2067: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2068: [31, 31, 32, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2069: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2070: [31, 31, 31, 32, 31, 31, 29, 30, 30, 29, 30, 30, 365], 2071: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2072: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2073: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366], 2074: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2075: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2076: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365], 2077: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366], 2078: [31, 31, 31, 32, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2079: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2080: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 30, 365], 2081: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 29, 31, 366], 2082: [31, 31, 32, 31, 31, 31, 30, 29, 30, 29, 30, 30, 365], 2083: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365], 2084: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365], 2085: [31, 32, 31, 32, 30, 31, 30, 30, 29, 30, 30, 30, 366], 2086: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365], 2087: [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30, 366], 2088: [30, 31, 32, 32, 30, 31, 30, 30, 29, 30, 30, 30, 365], 2089: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365], 2090: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365], 2091: [31, 31, 32, 31, 31, 31, 30, 30, 29, 30, 30, 30, 366], 2092: [31, 31, 32, 32, 31, 30, 30, 30, 29, 30, 30, 30, 366], 2093: [30, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 365], 2094: [31, 31, 32, 31, 31, 30, 30, 30, 29, 30, 30, 30, 365], 2095: [31, 31, 32, 31, 31, 31, 30, 29, 30, 30, 30, 30, 366], 2096: [31, 32, 31, 32, 31, 30, 30, 29, 30, 29, 30, 30, 365], 2097: [31, 32, 31, 32, 31, 30, 30, 30, 29, 30, 30, 30, 366], 2098: [31, 31, 32, 31, 31, 31, 29, 30, 29, 30, 29, 31, 365], 2099: [31, 31, 32, 31, 31, 31, 30, 29, 29, 30, 30, 30, 365], 2100: [31, 32, 31, 32, 31, 30, 30, 30, 29, 29, 30, 31, 366] }; const w = 1039; const I = 1; const M = 1; const e3 = 1975; const t3 = 7; const n3 = 4; const l3 = 190; const o3 = ["Baisakh", "Jestha", "Ashad", "Shrawan", "Bhadra", "Ashwin", "Kartik", "Mangsir", "Poush", "Magh", "Falgun", "Chaitra"]; const v = ["वैशाख", "ज्येष्ठ", "आषाढ", "श्रावण", "भाद्र", "आश्विन", "कार्तिक", "मंसिर", "पौष", "माघ", "फाल्गुण", "चैत्र"]; const r3 = ["वै.", "ज्ये.", "आ.", "श्रा.", "भा.", "आ.", "का.", "मं.", "पौ.", "मा.", "फा.", "चै."]; function s3(e, t) { return g[e.toString()][t - 1] } function a3(e, t, n) { try { max_date = g[e][t - 1] } catch (l) { return false } if (n <= max_date) { return true } return false } function c3(e, t, n) { is_valid_date = a3(e, t, n); if (!is_valid_date) { alert("वि. सं. " + d(e) + " " + v[t - 1] + " मा " + d(n) + " दिन छैन"); return } let l = 0; let o = e3; for (; o < e; o++) { l += g[o][12] } for (let e = 0; e < t - 1; e++) { l += g[o][e] } l += n - 1; l -= l3; let r = w; let s = I; let a = M; while (l > 0) { if (h(r + f)) { if (a < i[s - 1]) { a += 1; l -= 1 } else { s += 1; a = 0; if (s > 12) { r += 1; s = 1 } } } else { if (a < u[s - 1]) { a += 1; l -= 1 } else { s += 1; a = 0; if (s > 12) { r += 1; s = 1 } } } } return r + " " + s + " " + a } function u3(t, n, e) { if (t < w || t == w && n < I || t == w && n == I && e < M) { alert("Supported date range: Solar NS " + w + "-" + I + "-" + M + " to Solar NS 1164-6-29"); return } if (t > 1164 || t == 1164 && n > 6 || t == 1164 && n == 6 && e > 29) { alert("Supported date range: Solar NS " + w + "-" + I + "-" + M + " to Solar NS 1164-6-29"); return } let l = _(t, n, e); if (!l) { alert(" सौ. ने. सं. " + d(t) + " " + c[n - 1] + " मा " + d(e) + " दिन छैन"); return } let o = 0; for (let e = w; e < t; e++) { if (h(e + f)) o += 366; else o += 365 } for (let e = 0; e < n - 1; e++) { if (h(t)) o += i[e]; else o += u[e] } o += e - 1; let r = e3; let s = t3; let a = n3; while (o > 0) { if (a < g[r][s - 1]) { a += 1; o -= 1 } else { s += 1; a = 0; if (s > 12) { r += 1; s = 1 } } } return r + " " + s + " " + a } const i3 = 1975; const f3 = 1; const _3 = 1; const D = 1918; const A = 4; const J = 13; const d3 = 102; const h3 = ["Baisakh", "Jestha", "Ashad", "Shrawan", "Bhadra", "Ashwin", "Kartik", "Mangsir", "Poush", "Magh", "Falgun", "Chaitra"]; function h(e) { return e % 4 == 0 && e % 100 != 0 || e % 400 == 0 } function a3(e, t, n) { try { max_date = g[e][t - 1] } catch (l) { return false } if (n <= max_date) { return true } return false } function m3(e, t, n, l) { is_valid_date = a3(e, t, n); if (!is_valid_date) { if (l == "") { alert(d(e) + " " + v[t - 1] + " मा " + d(n) + " दिन छैन") } else { alert("BS Range Invalid. Valid Range: [1975 - 2100]") } return } let o = 0; let r = i3; for (; r < e; r++) { o += g[r][12] } for (let e = 0; e < t - 1; e++) { o += g[r][e] } o += n - 1; let s = D; let a = A; let c = J; while (o > 0) { if (h(s)) { if (c < y[a - 1]) { c += 1; o -= 1 } else { a += 1; c = 0; if (a > 12) { s += 1; a = 1 } } } else { if (c < b[a - 1]) { c += 1; o -= 1 } else { a += 1; c = 0; if (a > 12) { s += 1; a = 1 } } } } return s + " " + a + " " + c } function p3(t, n, e) { if (t < D || t == D && n < A || t == D && n == A && e < J) { alert("Supported date range " + D + "-" + A + "-" + J + " to 2044-4-15"); return } if (t > 2044 || t == 2044 && n > 4 || t == 2044 && n == 4 && e > 15) { alert("Supported date range " + D + "-" + A + "-" + J + " to 2044-4-15"); return } let l = 0; for (let e = D; e < t; e++) { if (h(e)) l += 366; else l += 365 } for (let e = 0; e < n - 1; e++) { if (h(t)) l += y[e]; else l += b[e] } l += e - 1; l -= d3; let o = i3; let r = f3; let s = _3; while (l > 0) { if (s < g[o][r - 1]) { s += 1; l -= 1 } else { r += 1; s = 0; if (r > 12) { o += 1; r = 1 } } } return o + " " + r + " " + s } let o = document.getElementById("select_year_ns_to_ad"); let x = document.getElementById("select_month_ns_to_ad"); let B = document.getElementById("select_date_ns_to_ad"); let S3 = document.getElementById("ad_date_to_ns"); let F = document.getElementById("select_year_ns_to_bs"); let N = document.getElementById("select_month_ns_to_bs"); let T = document.getElementById("select_date_ns_to_bs"); let k = document.getElementById("select_year_bs_to_ns"); let C = document.getElementById("select_month_bs_to_ns"); let K = document.getElementById("select_date_bs_to_ns"); let y3 = document.getElementById("ns_to_ad_result"); let b3 = document.getElementById("ad_to_ns_result"); let g3 = document.getElementById("ns_to_bs_result"); let w3 = document.getElementById("bs_to_ns_result"); for (let t = 1100; t < 1150; t++) { let e = document.createElement("option"); o.options.add(e); e.text = d(t); e.value = t } for (let t = 1100; t < 1150; t++) { let e = document.createElement("option"); F.options.add(e); e.text = d(t); e.value = t } for (let t = 2036; t < 2086; t++) { let e = document.createElement("option"); k.options.add(e); e.text = d(t); e.value = t } for (let l = 0; l < 12; l++) { let e = document.createElement("option"); x.options.add(e); e.text = c[l]; e.value = l + 1; let t = document.createElement("option"); N.options.add(t); t.text = c[l]; t.value = l + 1; let n = document.createElement("option"); C.options.add(n); n.text = v[l]; n.value = l + 1 } function I3() { B.innerHTML = ""; let e = parseInt(document.getElementById("select_year_ns_to_ad").value); let t = parseInt(document.getElementById("select_month_ns_to_ad").value); let n = u[t - 1]; if (h(e + f)) { n = i[t - 1] } for (let t = 1; t <= n; t++) { let e = document.createElement("option"); B.options.add(e); e.text = d(t); e.value = t } T.innerHTML = ""; let l = parseInt(document.getElementById("select_year_ns_to_bs").value); let o = parseInt(document.getElementById("select_month_ns_to_bs").value); let r = u[o - 1]; if (h(l + f)) { r = i[o - 1] } for (let t = 1; t <= r; t++) { let e = document.createElement("option"); T.options.add(e); e.text = d(t); e.value = t } } function M3() { K.innerHTML = ""; let e = parseInt(document.getElementById("select_year_bs_to_ns").value); let t = parseInt(document.getElementById("select_month_bs_to_ns").value); let n = g[e.toString()][t - 1]; for (let t = 1; t <= n; t++) { let e = document.createElement("option"); K.options.add(e); e.text = d(t); e.value = t } } I3(); M3(); function v3() { let e = r(parseInt(o.value), parseInt(x.value), parseInt(B.value)); let t = e.split(" "); let n = new Date(e).getDay(); let l = t[2] + " " + q[t[1] - 1] + " " + t[0] + ", " + U[n]; y3.innerHTML = l } function D3() { let e = S3.value; let t = e.split("-"); let n = $(t[0], t[1], t[2]); let l = n.split(" "); let o = new Date(e).getDay(); let r = d(l[0]) + " " + c[l[1] - 1] + " " + d(l[2]) + ", " + s[o]; b3.innerHTML = r } function A3() { let e = u3(F.value, N.value, T.value); let t = e.split(" "); let n = r(parseInt(F.value), parseInt(N.value), parseInt(T.value)); let l = H[new Date(n).getDay()]; let o = d(t[0]) + " " + v[t[1] - 1] + " " + d(t[2]) + ", " + l; g3.innerHTML = o } function J3() { let e = c3(k.value, C.value, K.value); let t = e.split(" "); let n = m3(k.value, C.value, K.value); let l = s[new Date(n).getDay()]; let o = d(t[0]) + " " + c[t[1] - 1] + " " + d(t[2]) + ", " + l; w3.innerHTML = o } let e = new Date; let x3 = e.getFullYear(); let B3 = e.getMonth() + 1; let F3 = e.getDate(); let N3 = $(x3, B3, F3); let t = N3.split(" "); let T3 = u3(t[0], t[1], t[2]); let n = T3.split(" "); o.value = t[0]; x.value = t[1]; B.value = t[2]; S3.value = (new Date).toISOString().substring(0, 10); F.value = t[0]; N.value = t[1]; T.value = t[2]; k.value = n[0]; C.value = n[1]; K.value = n[2];